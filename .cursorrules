아래 규칙을 엄격히 준수하여 코드를 작성한다.

Git 사용 규칙
- 무조건 물어본다

파일 추가, 삭제
- 무조건 물어본다

코드 추가, 수정, 삭제
- 코드 리팩토링 시 로직 변경하지 않는다. 코드 리팩토링 시 무조건 현재 코드 기준으로 리팩토링한다.
- 프레임워크 내에 공식 문서를 제일 먼저 참고한다
- 기능을 구현할 때 직접 로직을 작성하는 것 보단 관련 라이브러리를 사용한다
- 관련 라이브러리가 없을 땐 로직을 직접 작성한다
- 로직 작성은 최대한 간결하고 명확하게 작성한다
- 요청한 부분에 대해서만 최대한 코드를 줄이고 간결하게 작성한다
- 주석은 클래스, 메소드 단위만 작성하고 라인 별 주석은 작성하지 않는다
- 요청한 작업 외에 추가적인 작업은 하지 않는다
- 로직 작성과 관련된 요청을 하지 않는다면 구조만 작성한다
- 사용자가 명시적으로 요청한 파일만 생성한다
- 추측으로 추가 파일을 만들지 않는다
- 파일 추가 시 무조건 파일 구조를 물어본다
- 환경 변수는 기존 .env 파일에 있는 것만 사용한다
- 새로운 환경 변수를 추가하지 않는다
- 기존 환경 변수명을 변경하지 않는다

패키지 추가
- package.json 및 go.mod 변경 시 혹인 패키지 추가시 커맨드 무조건 실행하고 프로젝트 루트에서 패키지 최적화 한다

문서 추가, 수정, 삭제
- 문서는 항상 공식 문서를 참고하여 작성한다
- 문서는 항상 명확하고 쉽게 이해할 수 있도록 작성한다
- 문서는 항상 최신 상태를 유지한다
- 문서는 항상 쉽게 찾을 수 있도록 작성한다
- 문서는 항상 최신 상태를 유지한다

Nestjs 프레임워크
- Nestjs 프레임워크는 무조건 최신 버전의 공식 문서를 참고한다
- 모듈의 Export 되어 있는 파일들은 Barrel Export 에 추가한다. 해당 경로의 파일에 접근하는 다른 코드들도 경로를 수정한다.
- Nestjs 프레임워크와 관련 패키지, 컴포넌트는 무조건 최신 버전의 공식 문서를 참고한다

Typescript
- Barrel Export 파일은 무조건 생성하고 관련된 파일은 무조건 추가한다. 해당 경로의 파일에 접근하는 다른 코드들도 경로를 수정한다.
- PM2 환경에서 Multi Process 로 실행된다는 점을 고려하여 코드를 작성한다
- enum 타입의 키는 파스칼 케이스, 값은 문자열인 경우 케밥 케이스로 한다.
- interface name에 I prefix를 붙이지 않는다.
- class, interface, enum 의 이름은 대문자 영문으로 시작하며 파스칼 케이스로 한다.

문제해결
- 질문 혹은 문제에 대한 본질적인 해결법을 찾는다. 편법을 사용하지 않는다. 예를들면 인증이 필요한데 인증 설정이 잘못되어 있다고 인증을 없애는 것은 편법이다.
- 문제 해결 시 무조건 현재 코드 기준으로 문제를 해결한다
- 기능을 제거하거나 비활성화하지 않는다. 모든 기능을 유지하면서 문제를 해결한다
- 모듈, 라이브러리, 기능을 임의로 제거하지 않는다
- Dockerfile이 있으면 무조건 사용한다. image로 변경하지 않는다

packages/bun-shared
- modules 폴더는 각 모듈을 지칭하는 이름의 폴더들로 구성되어 있다.
- 모듈을 추가할 때 modules/index.ts 는 생성하지 않는다. 이유는 import {...} from bun-shared/modules/some-module 와 같이 사용하기 위함
- bun-shared 바로 하위의 개별 파일들은 bun-shared/index.ts 배럴 파일에 추가하며 폴더는 추가하지 않는다.
